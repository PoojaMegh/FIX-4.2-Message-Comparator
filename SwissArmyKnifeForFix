<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FIX Message Comparator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .container {
            width: 90%;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            box-sizing: border-box;
            overflow-x: auto;
        }

        h1, .resultTable th {
            color: #007bff; /* blue */
        }

        .input-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
        }

        textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        button {
            padding: 10px 20px;
            background-color: #4caf50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

        button:hover {
            background-color: #45a049;
        }

        .resultTables {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            overflow-x: auto; /* Add horizontal scrolling */
            white-space: nowrap; /* Prevent line breaks in table rows */
        }
        .resultTable {
            border: 1px solid #000; /* Add borders to cells */
            width: auto; /* Set width to auto to allow table to expand */
            margin-bottom: 20px;
            display: inline-block;
            vertical-align: top;
            white-space: normal; /* Reset white-space to allow text wrapping within cells */
        }


		.resultTable th, .resultTable td {
			border: 1px solid #000; /* Black borders */
			padding: 8px;
			text-align: left;
			white-space: pre-wrap;
			min-width: 150px;
		}

        .resultTable th {
            background-color: #f2f2f2;
            color: #007bff; /* blue */
        }

        .match {
            background-color: #aaffaa; /* green */
        }

        .mismatch {
            background-color: #ffaaaa; /* red */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>FIX Message Comparator</h1>
        <div class="input-group">
            <label for="separator">Separator (leave blank for default " "):</label>
            <input type="text" id="separator" placeholder="Enter separator...">
        </div>
        <div class="input-group">
            <label for="fixMessages1">FIX Messages 1:</label>
            <textarea id="fixMessages1" rows="5" cols="50"></textarea>
        </div>
        <div class="input-group">
            <label for="fixMessages2">FIX Messages 2:</label>
            <textarea id="fixMessages2" rows="5" cols="50"></textarea>
        </div>
        <button onclick="compareMessages()">Compare Messages</button>
        <button onclick="exportToJPEG()">Export to JPEG</button>
        <button onclick="exportToPDF()">Export to PDF</button>
        <button onclick="exportToCSV()">Export to CSV</button>
        <button onclick="mergeTables()">Merge Tables</button>
        <button onclick="transposeAndMergeTables()">Transpose and Merge Tables</button>
        <div class="resultTables" id="resultTables"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
    <script>
        // Your existing JavaScript code
        
        function compareMessages() {
            var separator = document.getElementById("separator").value.trim();
            var fixMessages1 = document.getElementById("fixMessages1").value.trim();
            var fixMessages2 = document.getElementById("fixMessages2").value.trim();

            if (!separator) {
                alert("No separator provided. Using default separator: ' ' (space).");
                separator = " ";
            }

            var messages1 = fixMessages1.split("\n");
            var messages2 = fixMessages2.split("\n");

            var numMessages = Math.max(messages1.length, messages2.length);

            var resultTables = document.getElementById("resultTables");
            resultTables.innerHTML = '';

            for (var i = 0; i < numMessages; i++) {
                var message1 = messages1[i] || "";
                var message2 = messages2[i] || "";

                var resultTable = document.createElement('table');
                resultTable.className = 'resultTable';
                resultTable.innerHTML = "<tr><th colspan='4'>Comparison Result - Message " + (i + 1) + "</th></tr><tr><th>Tag</th><th>Value in Message 1</th><th>Value in Message 2</th><th>Result</th></tr>";

                var tags1 = extractTagsAndValues(message1, separator);
                var tags2 = extractTagsAndValues(message2, separator);

                var subHeading1 = getSubHeading(tags1);
                var subHeading2 = getSubHeading(tags2);

                if (subHeading1) {
                    var caption = document.createElement('caption');
                    caption.textContent = subHeading1;
                    resultTable.appendChild(caption);
                }

                if (subHeading2 && subHeading2 !== subHeading1) {
                    var caption = document.createElement('caption');
                    caption.textContent = subHeading2;
                    resultTable.appendChild(caption);
                }

                var allTags = new Set([...tags1.keys(), ...tags2.keys()]);

                allTags.forEach(function(tag) {
                    var value1 = tags1.get(tag) || "";
                    var value2 = tags2.get(tag) || "";
                    var resultClass = (value1 === value2) ? "match" : "mismatch";

                    var row = document.createElement('tr');
                    row.className = resultClass;
                    row.innerHTML = "<td>" + tag + "</td><td>" + value1 + "</td><td>" + value2 + "</td><td>" + (value1 === value2 ? "Match" : "Mismatch") + "</td>";
                    resultTable.appendChild(row);
                });

                resultTables.appendChild(resultTable);
            }
        }

        function extractTagsAndValues(fixMessage, separator) {
            var tags = new Map();
            var fields = fixMessage.split(separator);
            fields.forEach(function(field) {
                var parts = field.split("=");
                if (parts.length === 2) {
                    tags.set(parts[0], parts[1]);
                }
            });
            return tags;
        }

        function getSubHeading(tags) {
            var tag35 = tags.get("35");
            var tag39 = tags.get("39");

            if (tag35 === "D") {
                return "New Single Order";
            } else if (tag35 === "F") {
                return "Cancel Order";
            } else if (tag35 === "8") {
                if (tag39 === "0") {
                    return "Execution Ack Report Order";
                } else if (tag39 === "1") {
                    return "Execution Partial Fill Report Order";
                } else if (tag39 === "2") {
                    return "Execution FullFill Report Order";
                }
            }

            return "";
        }

        function exportToJPEG() {
            html2canvas(document.getElementById('resultTables')).then(function(canvas) {
                var jpegImage = canvas.toDataURL("image/jpeg");
                var a = document.createElement('a');
                a.href = jpegImage;
                a.download = 'fix_comparison.jpeg';
                a.click();
            });
        }

        function exportToPDF() {
            var element = document.getElementById('resultTables');
            html2pdf()
                .from(element)
                .save('fix_comparison.pdf');
        }

        function exportToCSV() {
            var csvContent = [];
            var tables = document.getElementsByClassName('resultTable');
            for (var i = 0; i < tables.length; i++) {
                var rows = tables[i].querySelectorAll("tr");
                for (var j = 0; j < rows.length; j++) {
                    if (j === 0) continue; // Skip the header row
                    var row = [], cols = rows[j].querySelectorAll("td, th");
                    for (var k = 0; k < cols.length; k++) {
                        row.push(cols[k].innerText);
                    }
                    csvContent.push(row.join(","));
                }
            }
            var csv = csvContent.join("\n");
            var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            var link = document.createElement("a");
            if (navigator.msSaveBlob) { // IE 10+
                navigator.msSaveBlob(blob, 'fix_comparison.csv');
            } else {
                link.href = URL.createObjectURL(blob);
                link.setAttribute('download', 'fix_comparison.csv');
                document.body.appendChild(link);
                link.click();
            }
        }

        function mergeTables() {
            var resultTables = document.getElementById("resultTables");
            var allTables = document.querySelectorAll(".resultTable");
            var mergedTable = document.createElement("table");
            mergedTable.className = "resultTable";

            // Create the header row
            var headerRow = document.createElement("tr");
            headerRow.innerHTML = "<th>Tag</th><th>Value in Message 1</th><th>Value in Message 2</th><th>Result</th>";
            mergedTable.appendChild(headerRow);

            // Iterate over each table and copy rows to the merged table
            allTables.forEach(function(table) {
                var rows = table.querySelectorAll("tr");
                for (var i = 1; i < rows.length; i++) { // Start from index 1 to skip the header row
                    var newRow = document.createElement("tr");
                    newRow.innerHTML = rows[i].innerHTML;
                    newRow.className = rows[i].className; // Preserve the CSS class
                    mergedTable.appendChild(newRow);
                }
            });

            // Replace the existing resultTables content with the merged table
            resultTables.innerHTML = '';
            resultTables.appendChild(mergedTable);
        }

        function transposeAndMergeTables() {
            var resultTables = document.getElementById("resultTables");
            var allTables = document.querySelectorAll(".resultTable");
            var transposedTables = [];

            allTables.forEach(function(table) {
                var transposedTable = transposeTable(table);
                transposedTables.push(transposedTable);
            });

            // Merge transposed tables
            var mergedTable = mergeTransposedTables(transposedTables);

            // Replace the existing resultTables content with the merged table
            resultTables.innerHTML = '';
            resultTables.appendChild(mergedTable);
        }

        function transposeTable(table) {
            var transposedTable = document.createElement("table");
            var rows = table.querySelectorAll("tr");
            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].querySelectorAll("td, th");
                if (i === 0) continue; // Skip the header row
                for (var j = 0; j < cells.length; j++) {
                    if (j === 0) continue; // Skip the first column
                    if (!transposedTable.rows[j - 1]) {
                        transposedTable.insertRow(j - 1);
                    }
                    var newCell = transposedTable.rows[j - 1].insertCell();
                    newCell.textContent = cells[j].textContent;
                }
            }
            return transposedTable;
        }


        function mergeTransposedTables(transposedTables) {
            var mergedTable = document.createElement("table");
            mergedTable.className = "resultTable";

            // Create the header row
            var headerRow = document.createElement("tr");
            headerRow.innerHTML = "<th>Tag</th><th>Value in Message 1</th><th>Value in Message 2</th><th>Result</th>";
            mergedTable.appendChild(headerRow);

            // Iterate over each transposed table and copy rows to the merged table
            transposedTables.forEach(function(transposedTable) {
                var rows = transposedTable.querySelectorAll("tr");
                for (var i = 0; i < rows.length; i++) {
                    var newRow = document.createElement("tr");
                    newRow.innerHTML = rows[i].innerHTML;
                    newRow.className = rows[i].className; // Preserve the CSS class
                    mergedTable.appendChild(newRow);
                }
            });

            return mergedTable;
        }
    </script>
</body>
</html>
